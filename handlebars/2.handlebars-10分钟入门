=============================================================================================================
Handlebars-----模版引擎
入门教程:混合着看 
    新浪翻译：http://caibaojian.com/handlebars-js.html#t3
    segmentdefault社区：https://segmentfault.com/a/1190000000342636?from=androidqq#articleHeader8
    杨元的博客：http://www.cnblogs.com/iyangyuan/p/3471227.html
============================================================================================================
主要内容：
-1 入门案例
-2 handlebars基本表达式{{}}
-3 块级表达式(Block)
-4 路径(Path)
-5 注释
-6 内置Helper(with、each、if、unless)
-7 自定义Helper--------Handlebars.registerHelper('Helper名字',function(){// 实现代码})
-8 关于HTML编码 {{{}}}   把context里面带有的html标签正确解析输出 
-9 调试技巧(debug)

============================================================================================================

-1.快速入门案例
<!DOCTYPE html>
<html lang="">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title></title>
    
    <!--  1.导入handlebars的文件  -->
    <script src="./handlebars-v4.0.10.js" type="text/javascript"></script>
    <!--  2.定义自己的模版，通过class或者id来获取模板，所以要给id或者class值  -->
    <script id="tpl" type="text/x-handlebars-template">
        <div class="demo">
            <h1>{{name}}</h1>
            <p>{{content}}</p>
        </div>
    </script>


    <!--  3.操作模版：（1）获取模版（2）预编译（3）传递数据（4）渲染显示 -->
    <script src="./jquery-3.2.1.min.js"></script>
    <script>
        $(function(){
        //用jquery获取模板
        var source   =  $("#tpl").html();
        //原生方法
    //    var source = document.getElementById('#tpl').innerHTML;
        //预编译模板
        var template = Handlebars.compile(source);
        //模拟json数据------context称之为 上下文   也就是参数
        var context = { name: "liangting", content: "learn Handlebars"};
        //匹配json内容----生成的就是html代码了
        var html = template(context);
        //输入模板-----直接在页面上显示html代码
        $("body").html(html); 
        });
    </script>
</head>


<body>
    
</body>
</html>
=============================================================================================================
handlebars知识讲解及案例实战
-2.handlebars基本表达式{{}}
<!--handlebars表达式，是以 {{ 开始，跟一些内容，然后以 }} 结束。-->
<script id="tpl1" type=text/x-handlebars-template>
    <div class="entry">
        <p>name:{{name}}</p>
        <p>age:{{age}}</p>
    </div>
</script>

<script>
    $(document).ready(function(){
        var source = $("#tpl1").html();
        var template = Handlebars.compile(source);
        
        var context = {
            name:"xiaozhang",
            age:"13"
        };
        
        var html = template(context);
        $("#showInfo").html(html);
    });
</script>

-3.块级表达式(Block)
<script id="tpl1" type=text/x-handlebars-template>
    <div class="entry">
        {{#person}}
            <p>他的名字：{{name}}</p>
            <p>他的年龄：{{age}}</p>
        {{/person}}
    </div>
</script>

<script>
    $(document).ready(function(){
        var source = $("#tpl1").html();
        var template = Handlebars.compile(source);
        
        var context = {
            "person":{
                "name":"xiaozhang",
                "age":"13"
            }
        };
        
        var html = template(context);
        $("#showInfo").html(html);
    });
</script>

-4.路径(Path)
// 一般情况下，Handlebars 模板在计算值时，**会把传递给模板的参数作为上下文**
    var source   = "<p>{{lastName}}, {{firstName}}</p>";
    var template = Handlebars.compile(source);
    template({firstName: "Alan", lastName: "Johnson"});
// 结果如下：
    <p>Johnson, Alan</p>
// 在模板的某个区域切换上下文，使用内置的 with helper即可
<script id="tpl" type="text/x-handlebars-template">
    <div class="entry">
        {{#with person}}
            <p>person的name:{{this.name}}<br>company的name:{{../company.name}}</p>
        {{/with}}
    </div>
</script>

<script>
    $(function(){
        var source = $("#tpl").html();
        var template = Handlebars.compile(source);

            var context = {
                "person":{"name":"lll"},
                "company":{"name":"ttt"}                
            };  
        
        var html = template(context);
        
        $("#showInfo").html(html);
    });
</script>

-5.注释
<!--
你可以在 handlebars 代码中加注释，就跟在代码中写注释一样。对于有一定程度的逻辑的部分来说，这倒是一个很好的实践
    单行注释{{!注释内容}}
    多行注释{{!--注释内容--}}
    
注释是不会最终输出到返回结果中的。如果你希望把注释展示出来，就使用 HTML 的注释就行了。    
-->
<script id="tpl" type="text/x-handlebars-template">
    <div class="entry">
        {{!单行注释-这里的东西不会显示出来}}
        <p>{{person.name}}</p>
        {{#with company}}
            <p>{{name}}</p>
            <!--HTML 注释，这里会输出显示-->
        {{/with}}
    </div>
</script>

-6.内置Helper(with、each、if、unless)
=============================================================================================================
6.1with
<script id="tpl" type="text/x-handlebars-template">
    <div class="entry">
        <h3>{{title}}</h3>
        {{#with author}}
            <h1>{{firstname}}{{lastname}}</h1>
        {{/with}}
        <!--   如果不用with 来切换上下文，则需要用author.firstname      
                author.lastname这样的方式去访问  
                原因就是template(context)里面的context是整个{} json数据
        -->
        <h2>{{author.firstname}}{{author.lastname}}</h2>
    </div>
</script>


<script>
    $(function(){
        var source = $("#tpl").html();
        var template = Handlebars.compile(source);
        
        var context = {
            title:"my love",
            author:{
                firstname:"lll",
                lastname:"ttt"
            }
        };
        
        var html = template(context);
        
        $("#showInfo").html(html);
    });
</script>

=============================================================================================================
6.2each

<script id="tpl1" type=text/x-handlebars-template>
    <ul>
        {{#each people}}
        <!--  this来引用遍历的元素  -->
        <!--  事实上，可以使用 this 表达式在任何上下文中表示对当前的上下文的引用。 -->
        <!--  在使用 each 来循环列表的时候，可以使用 {{@index}} 来表示当前循环的索引值。 -->
            <li>{{@index}}:{{this}}</li>   
        <!--  对于 object 类型的循环，可以使用 {{@key}} 来表示 -->
<!--
            {{#each object}}
              {{@key}}: {{this}}
            {{/each}}
-->
        {{/each}}
    </ul>
</script>
<script>
    $(document).ready(function(){
        var source = $("#tpl1").html();
        var template = Handlebars.compile(source);
        
        var context = {
            people:["liming","zhangliang","dawang"]
        };
        
        var html = template(context);
        $("#showInfo").html(html);
    });
</script>

=============================================================================================================
6.3if
<!--if 表达式可以选择性的渲染一些区块。如果它的参数返回 false, undefined, null, "" 或 []（译注：还有 0）
（都是JS中的“假”值），Handlebars 就不会渲染这一块内容：
-->
<!--  在使用 if 表达式的时候，可以配合 {{else}} 来使用，这样当参数返回 假 值时，可以渲染 else 区块 -->
<!--  注意注意注意！！！else前面没有# else前面没有# else前面没有# -->
<script id="tpl1" type=text/x-handlebars-template>
    <div class="entry">
        {{#if author}}
            <h1>{{name}}</h1>
        {{else}}
            <h2>{{default}}</h2>
        {{/if}}
    </div>
</script>

<script>
    $(document).ready(function(){
        var source = $("#tpl1").html();
        var template = Handlebars.compile(source);
        
        var context = {
            "author":"",
            "default":"input again"
        };
        
        var html = template(context);
        $("#showInfo").html(html);
    });
</script>
=============================================================================================================
6.4unless
<!--unless helper 和 if helper　是正好相反的，当表达式返回假值时就会渲染其内容：-->
<!--如果在当前上下文中查找 license 返回假值，Handlebars 就会渲染这段警告信息。反之，就什么也不输出。-->
<script id="tpl" type="text/x-handlebars-template">
    {{#unless people}}
        <p>空的，啥有效内容都没有</p>
    {{/unless}}
</script>

-7.自定义Helper
//由于handlebars内置的helper功能有限，所以有的时候需要我们手动编写helper去实现一些复杂的功能
            很多时候，我们需要更加复杂的if判断逻辑，显然默认的if不能满足我们的需求。
/* 
 Handlebars.registerHelper用来定义Helper，它有两个参数，第一个参数是Helper名称，第二个参数是一个回调函数，
 用来执行核心业务逻辑。本例中的回调函数，有三个参数，其中前两个参数是需要比较的两个数(自己根据需要加的)，第三个参数是固定的(固定形式)，
 就叫options，如果加了该参数，就说明这个Helper是一个Block，块级别的Helper，有一定的语法结构，调用的时候加#号，
 就像if那样,没有options就不需要加# 
*/
<script>
    $(function(){
        var source = $("#tpl").html();
        var template = Handlebars.compile(source);
        
        var context = {
             "student": [
                         {
                             "name": "张三",
                             "sex": "0",    // 一会儿还有一个transformat Helper根据 0 1 转化成正确的性别
                             "age": 23
                         },
                         {
                             "name":"王二狗",
                             "sex": "0",
                             "age": 22
                         },
                         {
                             "name": "如花",
                             "sex": "1",
                             "age": 18
                         }
                     ]            
        };
        
        // 自定义一个Helper
        Handlebars.registerHelper('compare',function(v1,v2,options){
            if(v1>v2){
                // 满足添加条件继续执行
                return options.fn(this);
            }else{
                // 不满足条件执行 else部分
                return options.inverse(this);
            }
        });
        var html = template(context);
        
        $("#showInfo").html(html);
    });
</script>

-8.关于HTML编码
// 编码： 把{{}}里面的内容转化为纯文本，像html里面的标签< 都用&lt; 代替
// html 解析： 把html的标签正确显示出来
<script id="tpl" type="text/x-handlebars-template">
    {{#each student}}
        <tr>
            <td>{{name}}</td>
            <td>{{transformat sex}}</td>
            <td>{{age}}</td>
            {{#compare age 20}}
            <!--     年龄大于20的童鞋个人主页被编码，直接展示出来        -->
                <td>{{homepage}}</td>
            {{else}}
            <!--     而年龄小于20的童鞋，个人主页被当成html解析，显示的是一个超链接         -->
                <td>{{{homepage}}}</td>
            {{/compare}}
        </tr>
    {{/each}}
</script>

<script>
    $(function(){
        var source = $("#tpl").html();
        var template = Handlebars.compile(source);
        
        var context = {
             "student": [
                         {
                             "name":"张三",
                             "sex":"0",    
                             "age":"23",
                             "homepage":"<a href='javascript:void(0);'>张三的个人主页</a>"
                         },
                         {
                             "name":"李四",
                             "sex":"1",
                             "age":"22",
                             "homepage":"<a href='javascript:void(0);'>李四的个人主页</a>"
                         },
                         {
                             "name":"如花",
                             "sex":"1",
                             "age":"18",
                             "homepage":"<a href='javascript:void(0);'>如花的个人主页</a>"
                         }
                     ]            
        };
        
        // 自定义一个Helper: 比较大小
        Handlebars.registerHelper('compare',function(v1,v2,options){
            if(v1>v2){
                // 满足添加条件继续执行
                return options.fn(this);
            }else{
                // 不满足条件执行 else部分
                return options.inverse(this);
            }
        });
            // 自定义Helper: 转换0和1到男和女
            Handlebars.registerHelper('transformat',function(value){
                if(value=="0"){
                    return "男";
                }else{
                    return "女";
                }
            });

        var html = template(context);
        
        $("#tableList").html(html);
    });
</script>

-9.调试技巧
<!--
把下面一段"debug helper"加载到你的JavaScript代码里,然后在模板文件里通过{{debug}}或是{{debug someValue}}方便调试数据


    Handlebars.registerHelper("debug", function(optionalValue) {  
      console.log("Current Context");
      console.log("====================");
      console.log(this);
      if (optionalValue) {
        console.log("Value");
        console.log("====================");
        console.log(optionalValue);
      }
    });
-->
<script id="tpl" type="text/x-handlebars-template">
    {{#each student}}
        <tr>
            <td>{{name}}</td>
            <td>{{sex}}</td>
            <td>{{age}}</td>
            <!--    debug调试使用       -->
            <td>{{debug name}}</td>
            {{#compare age 20}}
            <!--     年龄大于20的童鞋个人主页被编码，直接展示出来        -->
                <td>{{homepage}}</td>
            {{else}}
            <!--     而年龄小于20的童鞋，个人主页被当成html解析，显示的是一个超链接         -->
                <td>{{{homepage}}}</td>
            {{/compare}}
        </tr>
    {{/each}}
</script>




<script>
    $(function(){
        var source = $("#tpl").html();
        var template = Handlebars.compile(source);
        
        var context = {
             "student": [
                         {
                             "name":"张三",
                             "sex":"0",    
                             "age":"23",
                             "homepage":"<a href='javascript:void(0);'>张三的个人主页</a>"
                         },
                         {
                             "name":"李四",
                             "sex":"1",
                             "age":"22",
                             "homepage":"<a href='javascript:void(0);'>李四的个人主页</a>"
                         },
                         {
                             "name":"如花",
                             "sex":"1",
                             "age":"18",
                             "homepage":"<a href='javascript:void(0);'>如花的个人主页</a>"
                         }
                     ]            
        };
        
        // 自定义一个Helper: 比较大小
        Handlebars.registerHelper('compare',function(v1,v2,options){
            if(v1>v2){
                // 满足添加条件继续执行
                return options.fn(this);
            }else{
                // 不满足条件执行 else部分
                return options.inverse(this);
            }
        });
            // debug  调试,自己改动了一下，这个比较清晰
            Handlebars.registerHelper("debug", function (optionalValue) {
                console.log("Current Context:");
                console.log(this);
                if (optionalValue) {
                    console.log("Value:"+optionalValue);
                }
            });
        var html = template(context);
        
        $("#tableList").html(html);
    });
</script>

